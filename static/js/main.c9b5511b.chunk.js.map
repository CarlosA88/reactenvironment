{"version":3,"sources":["common/NavComponent.js","common/FooterComponent.js","reactgettingstarted/basics/GithubCardsApp/Card.js","reactgettingstarted/basics/GithubCardsApp/CardList.js","reactgettingstarted/basics/GithubCardsApp/FormComponent.js","App.js","serviceWorker.js","index.js"],"names":["NavComponent","react_default","a","createElement","FooterComponent","Fragment","Card","profile","this","props","className","src","avatar_url","name","company","React","Component","CardList","profiles","map","basics_GithubCardsApp_Card","Object","assign","key","id","FormComponent","state","userName","handleSubmit","_callee","event","resp","regenerator_default","wrap","_context","prev","next","preventDefault","axios","get","concat","_this","sent","onSubmit","data","setState","stop","_this2","type","value","onChange","target","placeholder","required","App","addNewProfile","profileData","prevState","toConsumableArray","common_NavComponent","GithubCardsApp_CardList","title","GithubCardsApp_FormComponent","common_FooterComponent","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gTAUeA,SARM,WACnB,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,sBCKSC,EARS,WACpB,OACIH,EAAAC,EAAAC,cAAAF,EAAAC,EAAAG,SAAA,gBCcOC,0LAbZ,IAAMC,EAAUC,KAAKC,MACrB,OACER,EAAAC,EAAAC,cAAA,OAAKO,UAAU,kBACbT,EAAAC,EAAAC,cAAA,OAAKQ,IAAKJ,EAAQK,aACjBX,EAAAC,EAAAC,cAAA,OAAKO,UAAU,QACbT,EAAAC,EAAAC,cAAA,OAAKO,UAAU,QAAQH,EAAQM,MAC/BZ,EAAAC,EAAAC,cAAA,OAAKO,UAAU,WAAWH,EAAQO,kBARzBC,IAAMC,YCMVC,EANE,SAACR,GAAD,OAChBR,EAAAC,EAAAC,cAAA,WACGM,EAAMS,SAASC,IAAI,SAAAZ,GAAO,OAAIN,EAAAC,EAAAC,cAACiB,EAADC,OAAAC,OAAA,CAAMC,IAAKhB,EAAQiB,IAAQjB,iDCyB9CkB,oNAzBbC,MAAQ,CAAEC,SAAU,MACpBC,mDAAe,SAAAC,EAAOC,GAAP,IAAAC,EAAA,OAAAC,EAAA9B,EAAA+B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACbN,EAAMO,iBADOH,EAAAE,KAAA,EAEME,IAAMC,IAAN,gCAAAC,OACeC,EAAKf,MAAMC,WAHhC,OAEPI,EAFOG,EAAAQ,KAKbD,EAAKhC,MAAMkC,SAASZ,EAAKa,MACzBH,EAAKI,SAAS,CAAElB,SAAU,KANb,wBAAAO,EAAAY,SAAAjB,oIAQN,IAAAkB,EAAAvC,KACP,OACEP,EAAAC,EAAAC,cAAA,QAAMwC,SAAUnC,KAAKoB,cACnB3B,EAAAC,EAAAC,cAAA,SACE6C,KAAK,OACLC,MAAOzC,KAAKkB,MAAMC,SAClBuB,SAAU,SAACpB,GAAD,OAAWiB,EAAKF,SAAS,CAAElB,SAAUG,EAAMqB,OAAOF,SAC5DG,YAAY,kBACZC,UAAQ,IAEVpD,EAAAC,EAAAC,cAAA,kCApBoBY,IAAMC,YCwCnBsC,6MAnCb5B,MAAQ,CACNR,SAAU,MAGZqC,cAAgB,SAACC,GACff,EAAKI,SAAS,SAACY,GAAD,MAAgB,CAC5BvC,SAAQ,GAAAsB,OAAAnB,OAAAqC,EAAA,EAAArC,CAAMoC,EAAUvC,UAAhB,CAA0BsC,gFAKpC,OACEvD,EAAAC,EAAAC,cAAAF,EAAAC,EAAAG,SAAA,KACEJ,EAAAC,EAAAC,cAAA,UAAQO,UAAU,UAChBT,EAAAC,EAAAC,cAACwD,EAAD,OAEF1D,EAAAC,EAAAC,cAAA,QAAMO,UAAU,QACdT,EAAAC,EAAAC,cAAA,SAAOO,UAAU,SACfT,EAAAC,EAAAC,cAACyD,EAAD,CAAU1C,SAAUV,KAAKkB,MAAMR,YAEjCjB,EAAAC,EAAAC,cAAA,WAASO,UAAU,WACjBT,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKO,UAAU,eAAeF,KAAKC,MAAMoD,OACzC5D,EAAAC,EAAAC,cAAC2D,EAAD,CAAenB,SAAUnC,KAAK+C,mBAIpCtD,EAAAC,EAAAC,cAAA,UAAQO,UAAU,UAChBT,EAAAC,EAAAC,cAAC4D,EAAD,eA7BQ/C,aCIEgD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,IAASC,OAAOrE,EAAAC,EAAAC,cAACoE,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c9b5511b.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst NavComponent = () => {\r\n  return (\r\n    <nav>\r\n      <div>Home</div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default NavComponent;\r\n","import React from 'react';\r\n\r\nconst FooterComponent = () => {\r\n    return (\r\n        <>\r\n            Footer\r\n        </>\r\n    );\r\n};\r\n\r\nexport default FooterComponent;","import React, { Component } from 'react';\r\nimport './Card.css'\r\n\r\nclass Card extends React.Component {\r\n\trender() {\r\n  \tconst profile = this.props;\r\n  \treturn (\r\n    \t<div className=\"github-profile\">\r\n    \t  <img src={profile.avatar_url} />\r\n        <div className=\"info\">\r\n          <div className=\"name\">{profile.name}</div>\r\n          <div className=\"company\">{profile.company}</div>\r\n        </div>\r\n    \t</div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = (props) => (\r\n\t<div>\r\n  \t{props.profiles.map(profile => <Card key={profile.id} {...profile}/>)}\r\n\t</div>\r\n);\r\n\r\nexport default CardList;","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport \"./Form.css\";\r\n\r\nclass FormComponent extends React.Component {\r\n  state = { userName: \"\" };\r\n  handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n    const resp = await axios.get(\r\n      `https://api.github.com/users/${this.state.userName}`\r\n    );\r\n    this.props.onSubmit(resp.data);\r\n    this.setState({ userName: \"\" });\r\n  };\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          value={this.state.userName}\r\n          onChange={(event) => this.setState({ userName: event.target.value })}\r\n          placeholder=\"GitHub username\"\r\n          required\r\n        />\r\n        <button>Add card</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FormComponent;\r\n","import \"./App.css\";\r\nimport NavComponent from \"./common/NavComponent\";\r\nimport FooterComponent from \"./common/FooterComponent\";\r\nimport CardList from \"./reactgettingstarted/basics/GithubCardsApp/CardList\";\r\n\r\nimport React, { Component } from \"react\";\r\nimport FormComponent from \"./reactgettingstarted/basics/GithubCardsApp/FormComponent\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    profiles: [],\r\n  };\r\n\r\n  addNewProfile = (profileData) => {\r\n    this.setState((prevState) => ({\r\n      profiles: [...prevState.profiles, profileData],\r\n    }));\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <header className=\"header\">\r\n          <NavComponent />\r\n        </header>\r\n        <main className=\"main\">\r\n          <aside className=\"aside\">\r\n            <CardList profiles={this.state.profiles} />\r\n          </aside>\r\n          <article className=\"article\">\r\n            <div>\r\n              <div className=\"header-form\">{this.props.title}</div>\r\n              <FormComponent onSubmit={this.addNewProfile} />\r\n            </div>\r\n          </article>\r\n        </main>\r\n        <footer className=\"footer\">\r\n          <FooterComponent />\r\n        </footer>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}