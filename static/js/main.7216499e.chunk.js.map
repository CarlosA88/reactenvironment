{"version":3,"sources":["reactgettingstarted/basics/Button.js","reactgettingstarted/basics/Display.js","common/Dashboard.js","common/NavComponent.js","common/FooterComponent.js","App.js","serviceWorker.js","index.js"],"names":["ButtonCounter","props","react_default","a","createElement","Button_default","onClick","onClickFunction","increment","Display","message","Dashboard","_useState","useState","_useState2","Object","slicedToArray","course","setCourse","incrementCounter","incrementValue","Fragment","basics_Button","basics_Display","NavComponent","FooterComponent","App","common_NavComponent","className","common_Dashboard","common_FooterComponent","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mNAceA,EAXO,SAACC,GAErB,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAQG,QAHO,kBAAKL,EAAMM,gBAAgBN,EAAMO,aAGhD,IACIP,EAAMO,aCEDC,EARC,SAACR,GACb,OACIC,EAAAC,EAAAC,cAAA,WACIH,EAAMS,UCeHC,EAhBG,WAAM,IAAAC,EACMC,mBAAS,GADfC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACfK,EADeH,EAAA,GACPI,EADOJ,EAAA,GAEhBK,EAAmB,SAACC,GACxBF,EAAUD,EAASG,IAGrB,OACElB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAkB,SAAA,KACEnB,EAAAC,EAAAC,cAAA,mCACAF,EAAAC,EAAAC,cAACkB,EAAD,CAAef,gBAAiBY,EAAkBX,UAAW,KAC7DN,EAAAC,EAAAC,cAACkB,EAAD,CAAef,gBAAiBY,EAAkBX,UAAW,MAC7DN,EAAAC,EAAAC,cAACmB,EAAD,CAASb,QAASO,MCLTO,EARM,WACnB,OACEtB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,qBCKSqB,EARS,WACpB,OACIvB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAkB,SAAA,gBCuBOK,MAnBf,WACE,OACExB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAkB,SAAA,KACEnB,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAACuB,EAAD,OAEFzB,EAAAC,EAAAC,cAAA,QAAMwB,UAAU,QACd1B,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,eACEF,EAAAC,EAAAC,cAACyB,EAAD,QAGJ3B,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAC0B,EAAD,SCTYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,IAASC,OAAOnC,EAAAC,EAAAC,cAACkC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7216499e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nconst ButtonCounter = (props) => {\r\n  const handleClicks=()=> props.onClickFunction(props.increment)\r\n  return (\r\n    <div>\r\n      <Button onClick={handleClicks}>\r\n        +{props.increment}\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ButtonCounter;\r\n","import React from 'react';\r\n\r\nconst Display = (props) => {\r\n    return (\r\n        <div>\r\n           {props.message} \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Display;","import React, { useState } from \"react\";\r\nimport ButtonCounter from \"../reactgettingstarted/basics/Button\";\r\nimport Display from \"../reactgettingstarted/basics/Display\";\r\n\r\nconst Dashboard = () => {\r\n  const [course, setCourse] = useState(0);\r\n  const incrementCounter = (incrementValue) => {\r\n    setCourse(course + incrementValue);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h1>React getting started</h1>\r\n      <ButtonCounter onClickFunction={incrementCounter} increment={10} />\r\n      <ButtonCounter onClickFunction={incrementCounter} increment={100} />\r\n      <Display message={course} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n","import React from \"react\";\r\n\r\nconst NavComponent = () => {\r\n  return (\r\n    <nav>\r\n      <div>Home</div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default NavComponent;\r\n","import React from 'react';\r\n\r\nconst FooterComponent = () => {\r\n    return (\r\n        <>\r\n            Footer\r\n        </>\r\n    );\r\n};\r\n\r\nexport default FooterComponent;","import React from \"react\";\r\n// import logo from \"./logo.svg\";\r\n\r\nimport \"./App.css\";\r\nimport Dashboard from \"./common/Dashboard\";\r\nimport NavComponent from \"./common/NavComponent\";\r\nimport FooterComponent from \"./common/FooterComponent\";\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <header>\r\n        <NavComponent />\r\n      </header>\r\n      <main className=\"main\">\r\n        <aside>Navigation</aside>\r\n        <article>\r\n          <Dashboard />\r\n        </article>\r\n      </main>\r\n      <footer>\r\n        <FooterComponent />\r\n      </footer>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}